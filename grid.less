// My extend apart from bootstrap

// vars
@gap: 15px;
@grids: 5, 7, 12;
@line-height: 1.55;

@window-sm: 768px;
@window-md: 1024px;
@window-lg: 1440px;
@window-xl: 1920px;

@color: lighten(black, 20%);
@border: lighten(black, 40%);
@primary: darken(#7DC94D, 7%);
@highlight: #ffa92e;

// normalize
* {
	&,
	&:before,
	&:after {
		box-sizing: border-box;
	}
}

html, body {
	padding: 0;
	margin: 0;
}

body {
	font-size: 16px;
	font-family: sans-serif;
	line-height: @line-height;
	color: @color;
}

a {
	text-decoration: none;
	border-bottom: 1px dashed;
	
	&,
	&:link {
		color: @primary;
	}
	&:visited {
		color: darken(@primary, 10%);
	}
	&:hover {
		color: lighten(@primary, 10%);
	}
	&:active {
		color: darken(@primary, 10%);
	}
}

h1, h2, h3, h4, h5, h6 {
	margin: @gap*2 0 @gap;	
}

h2 {
	border-bottom: 1px solid @border;
}

p {
	margin: @gap 0;
}

.highlight(){
	background-color: fade(@highlight, 40%);
}

::selection {
	.highlight();
}

::-moz-selection {
	.highlight();
}

// Grid system
// container
.container-fluid, .container {
	padding: 0 @gap;
}

.container:extend(.container-fluid) {
	margin: 0 auto;
	@media (min-width: @window-sm) {
		max-width: @window-sm;
	}
	@media (min-width: @window-md) {
		max-width: @window-md;
	}
	@media (min-width: @window-lg) {
		max-width: @window-lg;
	}
}

// row and columns
[class|="row"] {
	margin-left: -@gap;
	margin-right: -@gap;
	background: red;
	
	> [class*="col-"] {
		padding-left: @gap;
		padding-right: @gap;
		vertical-align: top;
		background: orange;

		.row-bottom > & {
			vertical-align: bottom;
		}

		.row-middle > & {
			vertical-align: middle;
		}
	}
}

// set columns width
.make-cols(@columns, @count) when (@count =< @columns) {
	> .col-@{count} {
		width: percentage(@count/@columns);
	}
	
	.make-cols(@columns, @count + 1);
}

.make-cols-var(@columns, @size, @count) when (@count =< @columns) {
	> .col-@{size}-@{count} {
		width: percentage(@count/@columns);
	}
	
	.make-cols-var(@columns, @size, @count + 1);
}

// set different row
.make-grid(@grids, @count) when (@count =< length(@grids)) {
	@grid: extract(@grids, @count);
	
	.row-@{grid} {
		
		.make-cols-var(@grid, xs, 1);
		
		@media (min-width: @window-sm) {
			.make-cols-var(@grid, sm, 1);
		}
		
		@media (min-width: @window-md) {
			.make-cols-var(@grid, md, 1);
		}
		
		@media (min-width: @window-lg) {
			.make-cols-var(@grid, lg, 1);
		}
	}
	
	.make-grid(@grids, @count + 1);
}
.make-grid(@grids, 1);

// short hand for largest grid
.row {
	@grid: max(@grids);
	
	.make-cols-var(@grid, xs, 1);
	
	@media (min-width: @window-sm) {
		.make-cols-var(@grid, sm, 1);
	}
	
	@media (min-width: @window-md) {
		.make-cols-var(@grid, md, 1);
	}
	
	@media (min-width: @window-lg) {
		.make-cols-var(@grid, lg, 1);
	}
}

.stack {
	@grid: max(@grids);
	
	.make-stack-col(@grid, xs, @window-sm, 1);
	
	@media (min-width: @window-sm) {
		.make-stack-col(@grid, sm, @window-sm, 1);
	}
	
	@media (min-width: @window-md) {
		.make-stack-col(@grid, md, @window-md, 1);
	}
	
	@media (min-width: @window-lg) {
		.make-stack-col(@grid, lg, @window-lg, 1);
	}
}

// Stack
.make-stack(@grids, @count) when (@count =< length(@grids)){
	@grid: extract(@grids, @count);
	
	.stack-@{grid} {
		.make-stack-col(@grid, xs, @window-sm, 1);
		
		@media (min-width: @window-sm) {
			.make-stack-col(@grid, sm, @window-md, 1);
		}
		
		@media (min-width: @window-md) {
			.make-stack-col(@grid, md, @window-lg, 1);
		}
		
		@media (min-width: @window-lg) {
			.make-stack-col(@grid, lg, @window-xl, 1);
		}
	}
	
	.make-stack(@grids, @count + 1);
}
.make-stack(@grids, 1);

// Stack style
[class|="stack"] {
	text-align: justify;
	line-height: 0;
	background: silver;
	
	&:after {
		content: ".";
		display: inline-block;
		width: 100%;
		visibility: hidden;
	}
	
	> [class*="col-"] {
		line-height: @line-height;
		vertical-align: top;
		background: grey;
	}
}

// make stack col
.make-stack-col(@cols, @size, @width, @count) when (@count =< @cols) {
	// @wsize: ~"window-@{size}";
	
	& > .col-@{size}-@{count} {
		width: calc(~"(100% - ((@{cols} - 1) * @{gap} * 2)) * @{count} / @{cols} + (@{count} - 1) * @{gap} * 2");
		// width: percentage(((@width - (@cols - 1) * @gap * 2) * @count / @cols + @gap * 2 * (@count - 1)) / (@width - 2 * @gap));
		// width: percentage(@count / @cols);
	}
	.make-stack-col(@cols, @size, @width, @count + 1);
}

// spec columns style
.col-grid() {
	display: inline-block;
}

[class*="col-xs-"] {
	.col-grid();
}

@media (min-width: @window-sm) {
	[class*="col-sm-"] {
		.col-grid();
	}
}

@media (min-width: @window-md) {
	[class*="col-md-"] {
		.col-grid();
	}
}

@media (min-width: @window-lg) {
	[class*="col-lg-"] {
		.col-grid();
	}
}
